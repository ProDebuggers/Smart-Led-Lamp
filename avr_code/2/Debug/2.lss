
2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000176  0000020a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000176  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800116  00800116  00000220  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008aa  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000743  00000000  00000000  00000b7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000320  00000000  00000000  000012bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  000015e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c0  00000000  00000000  00001654  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d9  00000000  00000000  00001a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001aed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e7       	ldi	r30, 0x76	; 118
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e1       	ldi	r26, 0x16	; 22
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 31       	cpi	r26, 0x17	; 23
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 82 00 	call	0x104	; 0x104 <main>
  9e:	0c 94 b9 00 	jmp	0x172	; 0x172 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <usart_init>:
   
   return 0;
 }
 
void usart_init(void){
	UBRR0H= (unsigned char)(UBRRVAL>>8);   //high byte
  a6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    UBRR0L=(unsigned char)UBRRVAL;     			//low byte
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
   // UCSR0B |= (1<<TXEN0) | (1<<RXEN0);		//Enable Transmitter and Receiver
    //UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00); 
	  UCSR0B |= (1<<TXEN0) | (1<<RXEN0);		//Enable Transmitter and Receiver
  b0:	e1 ec       	ldi	r30, 0xC1	; 193
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	88 61       	ori	r24, 0x18	; 24
  b8:	80 83       	st	Z, r24
	 UCSR0C = 0x06;	//Set data frame format: asynchronous mode,no parity, 1 stop bit, 8 bit size
  ba:	86 e0       	ldi	r24, 0x06	; 6
  bc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  c0:	08 95       	ret

000000c2 <sendbyte>:
}

void sendbyte(unsigned char MSG){
    while((UCSR0A&(1<<UDRE0)) == 0);     // Wait if a byte is being transmitted
  c2:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  c6:	95 ff       	sbrs	r25, 5
  c8:	fc cf       	rjmp	.-8      	; 0xc2 <sendbyte>
    UDR0 = MSG; 
  ca:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  ce:	08 95       	ret

000000d0 <sendstr>:
}

void sendstr(unsigned char *s){
  d0:	0f 93       	push	r16
  d2:	1f 93       	push	r17
  d4:	cf 93       	push	r28
  d6:	8c 01       	movw	r16, r24
	unsigned char i = 0;
  d8:	c0 e0       	ldi	r28, 0x00	; 0
	while(s[i] != '\0'){
  da:	03 c0       	rjmp	.+6      	; 0xe2 <sendstr+0x12>
	 sendbyte(s[i]);
  dc:	0e 94 61 00 	call	0xc2	; 0xc2 <sendbyte>
	 i++;
  e0:	cf 5f       	subi	r28, 0xFF	; 255
    UDR0 = MSG; 
}

void sendstr(unsigned char *s){
	unsigned char i = 0;
	while(s[i] != '\0'){
  e2:	f8 01       	movw	r30, r16
  e4:	ec 0f       	add	r30, r28
  e6:	f1 1d       	adc	r31, r1
  e8:	80 81       	ld	r24, Z
  ea:	81 11       	cpse	r24, r1
  ec:	f7 cf       	rjmp	.-18     	; 0xdc <sendstr+0xc>
	 sendbyte(s[i]);
	 i++;
	 }
}
  ee:	cf 91       	pop	r28
  f0:	1f 91       	pop	r17
  f2:	0f 91       	pop	r16
  f4:	08 95       	ret

000000f6 <receivebyte>:

unsigned char receivebyte(void){
	while(!(UCSR0A & (1<<RXC0)));
  f6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  fa:	88 23       	and	r24, r24
  fc:	e4 f7       	brge	.-8      	; 0xf6 <receivebyte>
		return UDR0;
  fe:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 102:	08 95       	ret

00000104 <main>:
unsigned char defaultmsg[] = "LED Status:\n";
unsigned char rxdata;

int main(){ 
	
	DDRB |= (1<<PORTB0);
 104:	84 b1       	in	r24, 0x04	; 4
 106:	81 60       	ori	r24, 0x01	; 1
 108:	84 b9       	out	0x04, r24	; 4
	//PORTB |= (1<<PORTB0);	
	//_delay_ms(1000);
	//PORTB &= ~(1<<PORTB0);	
	usart_init();	
 10a:	0e 94 53 00 	call	0xa6	; 0xa6 <usart_init>
	
	
	while(1)
	{
		rxdata = receivebyte();
 10e:	0e 94 7b 00 	call	0xf6	; 0xf6 <receivebyte>
 112:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
		
		if((char)rxdata == 'y')
 116:	89 37       	cpi	r24, 0x79	; 121
 118:	61 f4       	brne	.+24     	; 0x132 <main+0x2e>
		{
			PORTB |= (1<<PORTB0);	
 11a:	85 b1       	in	r24, 0x05	; 5
 11c:	81 60       	ori	r24, 0x01	; 1
 11e:	85 b9       	out	0x05, r24	; 5
			sendstr(defaultmsg); 
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	0e 94 68 00 	call	0xd0	; 0xd0 <sendstr>
			sendstr(onmsg);
 128:	82 e1       	ldi	r24, 0x12	; 18
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	0e 94 68 00 	call	0xd0	; 0xd0 <sendstr>
 130:	ee cf       	rjmp	.-36     	; 0x10e <main+0xa>
			
		}
		else if((char)rxdata =='n')
 132:	8e 36       	cpi	r24, 0x6E	; 110
 134:	61 f4       	brne	.+24     	; 0x14e <main+0x4a>
		{
			PORTB &= ~(1<<PORTB0);
 136:	85 b1       	in	r24, 0x05	; 5
 138:	8e 7f       	andi	r24, 0xFE	; 254
 13a:	85 b9       	out	0x05, r24	; 5
			sendstr(defaultmsg); 
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	0e 94 68 00 	call	0xd0	; 0xd0 <sendstr>
			sendstr(offmsg); 
 144:	8d e0       	ldi	r24, 0x0D	; 13
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	0e 94 68 00 	call	0xd0	; 0xd0 <sendstr>
 14c:	e0 cf       	rjmp	.-64     	; 0x10e <main+0xa>
		}
		else{
		
			sendbyte(rxdata);
 14e:	0e 94 61 00 	call	0xc2	; 0xc2 <sendbyte>
				PORTB |= (1<<PORTB0);
 152:	85 b1       	in	r24, 0x05	; 5
 154:	81 60       	ori	r24, 0x01	; 1
 156:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 158:	2f ef       	ldi	r18, 0xFF	; 255
 15a:	83 ed       	ldi	r24, 0xD3	; 211
 15c:	90 e3       	ldi	r25, 0x30	; 48
 15e:	21 50       	subi	r18, 0x01	; 1
 160:	80 40       	sbci	r24, 0x00	; 0
 162:	90 40       	sbci	r25, 0x00	; 0
 164:	e1 f7       	brne	.-8      	; 0x15e <main+0x5a>
 166:	00 c0       	rjmp	.+0      	; 0x168 <main+0x64>
 168:	00 00       	nop
				_delay_ms(1000);
				PORTB &= ~(1<<PORTB0);
 16a:	85 b1       	in	r24, 0x05	; 5
 16c:	8e 7f       	andi	r24, 0xFE	; 254
 16e:	85 b9       	out	0x05, r24	; 5
 170:	ce cf       	rjmp	.-100    	; 0x10e <main+0xa>

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
